
INSTALLING A STANDALONE 'JUPYTANGO' DISTRIBUTION FOR PYTHON 2.7 USING MINICONDA2 ON A X64 LINUX SYSTEM


===================================================
0. SOME REMARKS
===================================================
- JupyTango is just a name, nothing official, it's even not a proposal, comes with no guarantee and no special future 
- JupyTango is just a POC to demonstrate what can be done for Tango in JupyterLab or the classic Notebook
- the version of packages used here are the ones for required for PyTango 9.2.1 
- here we want to create a standalone distribution not relying on any Tango lib that might be installed at system level
- in case you're behind a proxy be sure to export to required env. var: 
  export http_proxy=http://<proxy-addr>:<proxy-port>
  export https_proxy=http://<proxy-addr>:<proxy-port>

===================================================
1. MINICONDA INSTALL
===================================================
- download miniconda2 from: https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh
- change mode of the downloaded package: chmod 777 ./Miniconda2-latest-Linux-x86_64.sh
- execute the install script: ./Miniconda2-latest-Linux-x86_64.sh
- script will ask you to specify the destination directory - be aware, the installation is NOT movable (miniconda uses harcoded paths)
- here we choose to install the package in: $HOME/miniconda2  
- let the install process run till it completes - after that we got a minimium python 2.7 standalone installation 
- let's create an env. var pointing to our miniconda install directory: export CONDA_ROOT=$HOME/miniconda2
- install the 'numpy' conda package: conda install numpy
- do NOT install any other package for the moment

===================================================
2. SET/CLEANUP YOUR ENV. (avoid potential conflicts)
===================================================
- execute: unset LD_LIBRARY_PATH
- execute: unset PYTHONPATH
- execute: export PATH=$CONDA_ROOT/bin:$PATH
- be sure $CONDA_ROOT/bin/python is in your path typing 'which python'

===================================================
3. INSTALL ZMQ IN CONDA_ROOT
===================================================
- download: https://archive.org/download/zeromq_4.0.7/zeromq-4.0.7.tar.gz
- execute: tar -xzf ./zeromq-4.0.7.tar.gz
- execute: cd zeromq-4.0.7
- execute: mkdir build; cd build
- execute: ../configure --prefix=$CONDA_ROOT --disable-static
- execute: make
- execute: make install

===================================================
4. INSTALL OMNIORB IN CONDA_ROOT
===================================================
- download: https://sourceforge.net/projects/omniorb/files/omniORB/omniORB-4.2.2/omniORB-4.2.2.tar.bz2/download
- execute: bunzip2 omniORB-4.2.2.tar.bz2
- execute: tar -xf omniORB-4.2.2.tar
- execute: cd omniORB-4.2.2
- execute: mkdir build; cd build
- execute: ../configure --prefix=$CONDA_ROOT --disable-static
- execute: make
- execute: make install

===================================================
5. INSTALL TANGO IN CONDA_ROOT
===================================================    
- download: https://sourceforge.net/projects/tango-cs/files/tango-9.2.5a.tar.gz/download
- execute: tar -xzf tango-9.2.5a.tar.gz 
- execute: cd tango-9.2.5a
- execute: mkdir build; cd build
- execute: ../configure --prefix=$CONDA_ROOT --disable-static --disable-dbserver --disable-java --disable-java --with-zmq=$CONDA_ROOT --with-omni=$CONDA_ROOT
- execute: make
- execute: make install

===================================================
6. INSTALL BOOST IN CONDA_ROOT
===================================================
- NB: using another version than 1.61 might ruin your effort to obtain something working!
- download: https://sourceforge.net/projects/boost/files/boost/1.61.0/boost_1_61_0.tar.gz 
- execute: tar -xzf boost_1_61_0.tar.gz
- execute: cd boost_1_61_0
- execute: ./bootstrap.sh --prefix=$CONDA_ROOT --with-libraries=python
- execute: ./b2
- execute: ./b2 install

===================================================
7. INSTALL PYTANGO IN CONDA_ROOT
===================================================
- execute: export ZMQ_ROOT=$CONDA_ROOT
- execute: export OMNI_ROOT=$CONDA_ROOT
- execute: export TANGO_ROOT=$CONDA_ROOT
- execute: export NUMPY_ROOT=$CONDA_ROOT/lib/python2.7/site-packages
- NB: you can try 'pip install pytango' but it failed for us
- download: https://github.com/tango-controls/pytango/archive/v9.2.1.tar.gz 
- execute: tar -xzf pytango-9.2.1.tar.gz
- execute: cd pytango-9.2.1       
- execute: python setup.py build
- execute: python setup.py install --prefix=$CONDA_ROOT

===================================================
8. LEAVE CURRENT DIRECTORY
===================================================
- it's not a good idea to stay in the pytango dir - might have some annoying side effects!
- execute: cd $HOME

===================================================
9. INSTALL THE REQUIRED PYTHON PACKAGES
===================================================
- execute: pip install ptable   (ptable, a.k.a prettytable, is an old 'JupyTango' dependency that will be remove in a near future) 
- execute: conda install h5py scikit-image
- execute: conda install -c conda-forge jupyter jupyterlab
- execute: conda install -c bokeh bokeh

===================================================
10. INSTALL THE REQUIRED JUPYTERLAB EXTENSIONS
===================================================
- in case you plan to work with the classic notebook (i.e. not jupyterlab), you can skip this step
- execute: conda install nodejs
- execute: jupyter labextension install @jupyter-widgets/jupyterlab-manager    
    - NB: you can safely ignore any error related to 'gyp'
- execute: jupyter labextension install jupyterlab_bokeh 
    - NB: you can safely ignore any error related to 'gyp'
- in case these commands fail saying your proxy is not setup properly:
    - execute: npm config set -g proxy http://<addr>:<port>
    - execute: npm config set -g https-proxy http://<addr>:<port>

===================================================
11. INSTALL ITANGO
===================================================
- pip install itango

===================================================
12. INSTALL JUPYTANGO
===================================================
1. clone the following git directory: git clone git@github.com:nleclercq/jupyter-for-controls.git
3. execute: cd jupytango 
4. execute: python ./setup.py install --prefix=$CONDA_ROOT
5. create a ipython profile: cp -Rf ~/.ipython/profile_default/ ~/.ipython/profile_jupytango
6. configure the new profile by editing: ~/.ipython/profile_jupytango/ipython_config.py 
7. copy/paste the following content:

config = get_config()

# jupytango
config.InteractiveShellApp.extensions = [
    'jupytango'
]

8. create directory for the jupytango kernelspec: mkdir ~/.local/share/jupyter/kernels/jupytango

9. in this directory, create a file named: 'kernel.json’: nano ~/.local/share/jupyter/kernels/jupytango/kernel.json

10. edit the 'kernel.json' file and copy/paste the following content:

{
 "argv": [
  « <CONDA_ROOT>/bin/python",    
  "-m",
  "ipykernel",
  "-f",
  "{connection_file}",
  "--profile",
  "jupytango"
 ],
 "language": "python",
 "display_name": "JupyTango"
}

11: replace '<CONDA_ROOT>' with the fully specified path to your miniconda install directory


===================================================
13. TESTING JUPYTANGO
===================================================
1. launch jupyterlab. in a console type: jupyter-lab 
2. if you didn't change anything in the config file located in $HOME/.jupyter, then jupyter should open a browser to http://localhost:8888
3. in the 'launcher' tab of Jupyterlab, click on ‘JupyTango' to open a new notebook and load a kernel with preloaded JupyTango packages
4. try the '%tango_monitor' magic typing: 'tm' + <tab> to select a device + <tab> to select an attribute
5. try the '%plot_tango_attribute' magic typing: 'pta' + <tab> to select a device + <tab> to select an attribute 
6. enjoy

